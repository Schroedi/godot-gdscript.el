#+TITLE: Emacs Major Mode for Godot's GDScript
#+AUTHOR: Franco Eusébio Garcia
#+EMAIL: francogarcia@protonmail.com

* Introduction
This is a prototype of major mode to support GDScript, the scripting language
used by the [[www.godotengine.org][Godot Game Engine]] into [[https://www.gnu.org/software/emacs/][GNU Emacs]]. It follows the description of the
language provided in [[https://github.com/godotengine/godot/wiki/gdscript][gdscript]].

The implementation changes ~python.el~ major mode shipped with Emacs to support
GDScript language syntax constructs. It is a work in progress; currently it
supports syntax highlighting and indentation. It is important to note that
completion and shell support is not available yet; the existing implementation
is Python's one, left for reference and future work.

* References

- [[http://godotengine.org/projects/godot-engine/wiki/Documentation][Godot Engine --- Documentation --- OpenProject]];
- [[https://github.com/godotengine/godot/wiki][godotengine/godot Wiki --- GitHub]];
- [[https://github.com/godotengine/godot/wiki/gdscript][gdscript · godotengine/godot Wiki · GitHub]];
- [[https://github.com/beefsack/GDScript-sublime][beefsack/GDScript-sublime --- GitHub]].

* Setting-Up in Emacs
#+BEGIN_SRC emacs-lisp :tangle no
(require 'godot-gdscript-mode)
#+END_SRC

* About this File
** Org-Mode Notes
- Set ~comments~ to ~both~ to ease debugging and exporting Org as comments.
  + See "Jumping between code and Org" in [[http://orgmode.org/manual/Extracting-source-code.html][Extracting source code - The Org
    Manual]].

#+BEGIN_SRC org :tangle no
:PROPERTIES:
:tangle:  godot-gdscript-mode.el
:padline: yes
:comments: both
:END:
#+END_SRC

- For version control, however, it is more interesting to disable comments, as
  it leaves the comments out of the tangled code.

#+BEGIN_SRC org :tangle no
:PROPERTIES:
:tangle:  godot-gdscript-mode.el
:padline: yes
:comments: no
:END:
#+END_SRC

* Implementation
:PROPERTIES:
:tangle:  godot-gdscript-mode.el
:padline: yes
:comments: no
:END:

** Header
#+BEGIN_SRC emacs-lisp
;;; godot-gdscript.el --- Major mode for editing Godot Engine GDScript files.
#+END_SRC

*** Copyright
#+BEGIN_SRC emacs-lisp
;; Copyright (C) 2015--2016 Franco Eusébio Garcia
#+END_SRC

*** Author, Version, Keywords
#+BEGIN_SRC emacs-lisp
;; Author: Franco Eusébio Garcia <francogarcia@protonmail.com>
;; Version: 0.0.1
;; Keywords: godot game engine
#+END_SRC

*** License
Currently using GNU General Public License version 3.

#+NAME: license
#+BEGIN_SRC emacs-lisp
;;; License:

;; This file not shipped as part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+END_SRC

*** Commentary
#+BEGIN_SRC emacs-lisp
;;; Comentary:

;; This is a draft to add support for GDScript in Emacs. GDScript is the
;; language which Godot Game Engine uses to prototype and implement games. Godot
;; is an open-source game engine, available at: <http://www.godotengine.org/>.

;; The mode uses Fabián E. Gallina's `python.el' as the basis and reference for
;; the implementation, due to the similarities between GDScript and Python
;; syntax. However, as some keywords and operators do differ, `python-mode' is
;; not derived; instead, its code is changed to support the GDScript language.
#+END_SRC

*** Dependencies
#+BEGIN_SRC emacs-lisp
;; Package-Requires:
#+END_SRC

** Code
#+BEGIN_SRC emacs-lisp
;;; Code
#+END_SRC

** Dependencies --- Loading
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Settings
#+NAME: settings
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Customization
*** Customizing Indentation
#+NAME: indentation_customization
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Utilities
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Grammar and Syntax
*** Language Reference

Useful classes and methods:

- GDScriptLanguage::get_reserved_words();
- GDFunctions::get_func_name();
- GDFunctions::Function;
- Node class.

*** Keywords
#+NAME: language_keywords
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Types
#+NAME: language_keywords_begin
#+BEGIN_SRC emacs-lisp
#+END_SRC

**** Built-In Types
***** Basic Types
- ~null~;
- ~bool~;
- ~int~;
- ~float~;
- ~String~.

#+BEGIN_SRC emacs-lisp
#+END_SRC

***** Vector Types
- ~Vector2~;
- ~Rect2~;
- ~Vector3~;
- ~Matrix32~;
- ~Plane~;
- ~Quat~;
- ~AABB~;
- ~Matrix3~;
- ~Transform~.

#+BEGIN_SRC emacs-lisp
#+END_SRC

***** Engine Types
- ~Color~;
- ~Image~;
- ~NodePath~;
- ~RID~;
- ~Object~;
- ~InputEvent~.

#+BEGIN_SRC emacs-lisp
#+END_SRC

***** Containers
- ~Array~;
- ~Dictionary~;
- ~ByteArray~;
- ~IntArray~;
- ~StringArray~;
- ~Vector2Array~;
- ~Vector3Array~;
- ~ColorArray~.

#+BEGIN_SRC emacs-lisp
#+END_SRC

**** Types End
#+NAME: language_keywords_end
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Variables

*** Constants
#+NAME: language_constants
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Events
#+NAME: language_events
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Functions
#+NAME: language_functions
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Operators
| Operator               | Description                           |
|------------------------+---------------------------------------|
| x[index]               | Subscription, Highest Priority        |
| x.attribute            | Attribute Reference                   |
| extends                | Instance Type Checker                 |
| ~                      | Bitwise NOT                           |
| -x                     | Negative                              |
| * / %                  | Multiplication / Division / Remainder |
| + -                    | Addition / Subtraction                |
| << >>                  | Bit Shifting                          |
| &                      | Bitwise AND                           |
| ^                      | Bitwise XOR                           |
| |                      | Bitwise OR                            |
| < > == != >= <=        | Comparisons                           |
| in                     | Content Test                          |
| ! not                  | Boolean NOT                           |
| and &&                 | Boolean AND                           |
| or ||                  | Boolean OR                            |
| = += -= *= /= %= &= |= | Assignment, Lowest Priority           |

#+NAME: language_operatords
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Literals
| Literal           | Name                         |
|-------------------+------------------------------|
| 45                | Base 10 Integer              |
| 0x8F51            | Base 16 (hex) Integer        |
| 3.14, 58.1e-10    | Floating Point Number (real) |
| 'Hello', "Hi"     | Strings                      |
| """Hello, Dude""" | Multiline String             |
| @"Node/Label"     | Node Path or StringName      |

*** Comments

** Syntax Highlighting (Font Locking)
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Shell Integration

** Shell Completion

** PDB Track Integration

** Symbol Completion

** Fill Paragraph

** Skeletons

** Misc Helpers

** Utility Functions

** Declaration (look for "prog-mode")
~define-derived-mode~ uses another major mode as a basis to create a new major
mode (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html#Derived-Modes][GNU Emacs Lisp Reference Manual: Derived Modes]]). The documentation
recommends to inherit either from ~fundamental-mode~ or ~prog-mode~. As GDScript
resembles Python, it would be possible to use ~python-mode~ as basis.

#+NAME: declaration
#+BEGIN_SRC emacs-lisp
#+END_SRC

Besides the mode, it automatically defines the variables:
- ~godot-gdscript-mode-abbrev-table~;
- ~godot-gdscript-mode-hook~;
- ~godot-gdscript-mode-map~;
- ~godot-gdscript-mode-syntax-table~.

Therefore, one should consider all these values declared from this section on.

** Clean-Up
#+NAME: clean_up
#+BEGIN_SRC emacs-lisp
#+END_SRC

** File Association
#+NAME: file_association
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Keybindings
#+NAME: keybindings
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Provide the Module
#+NAME: provide
#+BEGIN_SRC emacs-lisp
(provide 'godot-gdscript-mode)
#+END_SRC

** Local Variables
#+NAME: local_variables
#+BEGIN_SRC emacs-lisp
;; Local Variables:
;; coding: utf-8
;; End:
#+END_SRC

** End
#+BEGIN_SRC emacs-lisp
;;; godot-gdscript-mode.el ends here.
#+END_SRC

* Miscellaneous                                                                :noexport:
#+BEGIN_SRC emacs-lisp
(back-to-indentation)
#+END_SRC
